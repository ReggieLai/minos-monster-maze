Development: All features implemented in the previous milestones should be working, or improved upon if it’s the case. 
* Blade polygon made up of 22 triangles (previous polygon requirement) 
* Fixed collision bugs (can jump at corners now) and improved efficiency by filtering out nearby objects as candidates for collision checks
* Used collections class to render all floor and ice tiles with a single shader each (instead of one shader per tile)
* Fixed memory leaks from previous milestones 


- Robustness: Sustain progressive, non-repetitive gameplay across one or more levels for 10min including all new features. No verbal explanation should be required at any point during the gameplay. 
* 13 levels in total with one boss level, and 6 tutorial levels 
* An intro to the game and prompts in individual levels guide the player so that no verbal explanation is needed


- Usability: Include a self-explanatory tutorial introducing the player to the game mechanics. 
* 6 tutorial levels to ease players into the mechanics, controls, and gameplay 
   * Helpful prompts for each tutorial level 
* Prompt before the boss to give players a hint to how to beat the level 


- External Integration: Include integration of one or more external tools or libraries (physical simulation (PhysX, Bullet, ODE, etc …), game engines, or alternatives) 
* Integrated FreeType API for text rendering


- Advanced Graphics: Implementation of one or more advanced graphics features including visual effects (Particle Systems, 2.5D(3D) lighting, 2D dynamic shadows) and/or advanced 2D geometric modifications (2D deformations, rigged/skinned motion). 
* Implemented a particle system to simulate blood effects when the player dies 
* Implemented a lighting system that keeps a spotlight on the player on levels where it’s dark


- Advanced Gameplay: Implementation of one or more advanced gameplay features including advanced decision making mechanisms based on goals (path planning, A*, or similar), or some form of group behavior if applicable to the game; more complex physic interactions with the environment (e.g. gravity, bouncing, complex dynamics). 
* A* search algorithm for our AI (harpies) 
* Timer to keep track of how long users spend on each level 
   * On harder levels, the timer does not reset with each death so players can challenge themselves to beat a level within a certain amount of time


- Accessibility: evaluate and optimizing user-game interactions (choice of user gestures, ease of navigation, etc …). 
* Rotation gauge UI 
* Highlighted tutorial levels in select screen 
* Addition of UI for timer and rotation energy 


- Audio: There should be audio feedback for all meaningful interactions in the game as well as a background music with tones reflecting the current state of the game.
* Implemented an audio manager to load in music for multiple interactions in the game 
   * Player death, game menu, screen rotation, button selection, boss noises, swinging blades